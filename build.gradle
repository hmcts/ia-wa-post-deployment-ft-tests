import org.gradle.api.file.DuplicatesStrategy
import org.gradle.api.tasks.Copy

plugins {
    id 'application'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.springframework.boot' version '2.5.15'
    id 'org.owasp.dependencycheck' version '9.1.0'
    id 'com.github.ben-manes.versions' version '0.39.0'
    id 'org.sonarqube' version '3.2.0'
    id 'io.freefair.lombok' version '6.2.0'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

lombok {
  config['config.stopBubbling'] = 'true'
  config['lombok.addLombokGeneratedAnnotation'] = 'true'
  config['lombok.anyConstructor.addConstructorProperties'] = 'true'
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {

    testUtils {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/testUtils/java')
        }
        resources.srcDir file('src/testUtils/resources')
    }

    functionalTest {
        java {
            compileClasspath += testUtils.output
            runtimeClasspath += testUtils.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }

    integrationTest {
        java {
            compileClasspath += testUtils.output
            runtimeClasspath += testUtils.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }

    smokeTest {
        java {
            compileClasspath += testUtils.output
            runtimeClasspath += testUtils.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

tasks.withType(Copy) {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
    failFast = true
}

task functional(type: Test) {
    description = "Runs functional tests"
    group = "Verification"
    systemProperty "scenario", System.getProperty('scenario')
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    testLogging.showStandardStreams = true
}

task integration(type: Test) {
    description = "Runs integration tests"
    group = "Verification"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    failFast = true
}

task smoke(type: Test) {
    description = "Runs Smoke Tests"
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
    maxWarnings = 0
    toolVersion = '10.12.0'
    getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
    toolVersion = "6.18.0"
    sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest, sourceSets.smokeTest]
    reportsDir = file("$project.buildDir/reports/pmd")
    // https://github.com/pmd/pmd/issues/876
    ruleSets = []
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
    executionData(test, integration)
    reports {
        xml.required = true
        csv.required = false
        xml.getOutputLocation().set(file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml"))
    }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

sonarqube {
    properties {
        property "sonar.projectName", "Reform :: ia-wa-post-deployment-ft-tests"
        property "sonar.projectKey", "uk.gov.hmcts.reform:ia-wa-post-deployment-ft-tests"
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    }
}

// before committing a change, make sure task still works
dependencyUpdates {
    def isNonStable = { String version ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
        def regex = /^[0-9,.v-]+$/
        return !stableKeyword && !(version ==~ regex)
    }
    rejectVersionIf { selection -> // <---- notice how the closure argument is named
        return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = 11 //test framework project, never released to production so CVE score not relevant
    suppressionFile = 'config/owasp/suppressions.xml'

    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

dependencyManagement {
    dependencies {
        //dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.68'
      //dependency group: 'org.bouncycastle', name: 'bcpkix-jdk18on', version: '1.78.1'
        // CVE-2018-10237 - Unbounded memory allocation
        dependencySet(group: 'com.google.guava', version: '32.0.0-jre') {
            entry 'guava'
        }
        dependency group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
        dependency group: 'commons-io', name: 'commons-io', version: '2.8.0'

      dependency group: 'org.yaml', name: 'snakeyaml', version: '2.2'

      //CVE-2021-28170
      dependency group: 'org.glassfish', name: 'jakarta.el', version: '4.0.1'

      // CVE-2020-36518
      dependency group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.17.1'
      dependency group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.17.1'
      dependency group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.17.1'

      //CVE-2021-42550
      dependencySet(group: 'ch.qos.logback', version: '1.2.13') {
        entry 'logback-classic'
        entry 'logback-core'
      }

      dependency group: 'com.fasterxml.woodstox', name: 'woodstox-core', version: '6.6.2'


      dependency group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'

      dependencySet(group: 'io.netty', version: '4.1.110.Final'){
        entry 'netty-buffer'
        entry 'netty-codec'
        entry 'netty-codec-dns'
        entry 'netty-codec-http'
        entry 'netty-codec-http2'
        entry 'netty-codec-socks'
        entry 'netty-common'
        entry 'netty-handler'
        entry 'netty-handler-proxy'
        entry 'netty-resolver'
        entry 'netty-resolver-dns'
        entry 'netty-resolver-dns-classes-macos'
        entry 'netty-resolver-dns-native-macos'
        entry 'netty-transport'
        entry 'netty-transport-classes-epoll'
        entry 'netty-transport-classes-kqueue'
        entry  'netty-transport-native-epoll'
        entry 'netty-transport-native-kqueue'
        entry 'netty-transport-native-unix-common'

      }

      dependency group: 'io.projectreactor.netty', name: 'reactor-netty-core', version: '1.0.45'
      dependency group: 'io.projectreactor.netty', name: 'reactor-netty-http', version: '1.0.45'


      dependency group: 'org.springframework.security', name: 'spring-security-crypto', version: '5.5.8'
      dependency group: 'org.springframework.security', name: 'spring-security-rsa', version: '1.1.3'


    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

def versions = [
        junit           : '5.7.1',
        junitPlatform   : '1.7.1',
        reformLogging   : '5.1.9',
        springfoxSwagger: '3.0.0',
        serenity        : '2.2.12',
        tomcat          : '9.0.86'
]

ext.libraries = [
        junit5: [
                "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
                "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
                "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
                "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
                "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
        ]
]

dependencies {
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'

    implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger

    implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
    implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.reformLogging

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.17.1'

    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: versions.tomcat
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: versions.tomcat

    implementation group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '4.0.0'

    testImplementation libraries.junit5
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '3.0.5'

    implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '3.1.4'
    implementation group: 'com.github.hmcts', name: 'core-case-data-store-client', version: '4.7.6'

    implementation group: 'com.azure', name: 'azure-messaging-servicebus', version: '7.5.0'

    testImplementation group: 'com.github.hmcts', name: 'document-management-client', version: '7.0.1'

    testImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    testImplementation "org.junit.vintage:junit-vintage-engine:${versions.junit}"

    testUtilsImplementation sourceSets.main.runtimeClasspath
    testUtilsImplementation sourceSets.test.runtimeClasspath

    integrationTestImplementation sourceSets.main.runtimeClasspath
    integrationTestImplementation sourceSets.test.runtimeClasspath

    functionalTestImplementation sourceSets.main.runtimeClasspath
    functionalTestImplementation sourceSets.test.runtimeClasspath

    smokeTestImplementation sourceSets.main.runtimeClasspath
}

mainClassName = 'uk.gov.hmcts.reform.wapostdeploymentfttests.Application'

bootJar {
    getArchiveFileName().set(provider {
        'ia-wa-post-deployment-ft-tests.jar'
    })

    manifest {
        attributes('Implementation-Version': project.version.toString())
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
