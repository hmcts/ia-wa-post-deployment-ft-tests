buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("net.serenity-bdd:serenity-gradle-plugin:3.6.22")
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.5.0'
  id 'org.owasp.dependencycheck' version '12.1.3'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.sonarqube' version '6.2.0.5505'
  id 'io.freefair.lombok' version '8.13.1'
}

apply plugin: 'java'
apply plugin: 'net.serenity-bdd.serenity-gradle-plugin'
apply plugin: 'project-report'
apply plugin: 'idea'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}
sourceSets {

  testUtils {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/testUtils/java')
    }
    resources.srcDir file('src/testUtils/resources')
  }

  functionalTest {
    java {
      compileClasspath += testUtils.output
      runtimeClasspath += testUtils.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += testUtils.output
      runtimeClasspath += testUtils.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += testUtils.output
      runtimeClasspath += testUtils.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

tasks.withType(Copy) {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  systemProperty "scenario", System.getProperty('scenario')
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  finalizedBy aggregate
  testLogging.showStandardStreams = true
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.26.1'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "7.14.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: ia-wa-post-deployment-ft-tests"
    property "sonar.projectKey", "uk.gov.hmcts.reform:ia-wa-post-deployment-ft-tests"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = 1 //test framework project, never released to production so CVE score not relevant
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyManagement {
  dependencies {
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '33.4.8-jre') {
      entry 'guava'
    }
    dependency group: 'commons-io', name: 'commons-io', version: '2.19.0'
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    name = "AzureArtifacts"
    url = uri("https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1")
  }
}

def versions = [
  junit           : '5.13.1',
  junitPlatform   : '1.13.1',
  reformLogging   : '6.1.9',
  serenity        : '3.9.8',
  tomcat          : '10.1.16'
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'

  implementation group: 'jakarta.servlet', name: 'jakarta.servlet-api', version: '5.0.0'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.13'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.reformLogging

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.25.0'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.25.0'

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  testImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform
  testImplementation group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform
  testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: versions.junitPlatform
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.3.0'

  testImplementation('org.mockito:mockito-junit-jupiter:5.11.0') {
    exclude group: 'org.junit.jupiter', module: 'junit-jupiter'
  }

  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.3.2'
  implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'
  implementation group: 'com.github.hmcts', name: 'core-case-data-store-client', version: '4.9.2'

  implementation group: 'com.azure', name: 'azure-messaging-servicebus', version: '7.17.12'
  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.4'

  testImplementation group: 'com.github.hmcts', name: 'document-management-client', version: '7.0.1'

  testImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity, {
    exclude group: 'commons-beanutils', module: 'commons-beanutils'
  }
  testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
  testImplementation('org.apiguardian:apiguardian-api:1.1.2')
  testImplementation 'commons-beanutils:commons-beanutils', {
    version {
      strictly '1.11.0'
    }
  }

  testUtilsImplementation sourceSets.main.runtimeClasspath
  testUtilsImplementation sourceSets.test.runtimeClasspath

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
}

application {
  mainClass = 'uk.gov.hmcts.reform.wapostdeploymentfttests.Application'
}

bootJar {
  getArchiveFileName().set(provider {
    'ia-wa-post-deployment-ft-tests.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
